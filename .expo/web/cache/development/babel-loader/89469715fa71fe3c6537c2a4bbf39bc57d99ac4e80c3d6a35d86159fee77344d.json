{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport React, { useEffect, useState } from 'react';\nimport styles from \"./single-player-game.styles\";\nimport { GradientBackground, Board } from \"../../components\";\nimport { isEmpty, isTerminal, getBestMove, useSound } from \"../../utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar SCREEN_WIDTH = Dimensions.get(\"screen\").width;\nvar SinglePlayerGame = function SinglePlayerGame() {\n  var _useState = useState([null, null, null, null, null, null, null, null, null]),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var _useState3 = useState(Math.random() < 0.5 ? \"HUMAN\" : \"BOT\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    turn = _useState4[0],\n    setTurn = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isHumanMaximizing = _useState6[0],\n    setIsHumanMaximizing = _useState6[1];\n  var playSound = useSound();\n  var gameResult = isTerminal(state);\n  useEffect(function () {\n    if (gameResult) {\n      var winner = getWinner(gameResult.winner);\n      if (winner === \"HUMAN\") {\n        playSound(\"win\");\n        alert(\"You Win!\");\n      }\n      if (winner === \"BOT\") {\n        playSound(\"loss\");\n        alert(\"You Lost!\");\n      }\n      if (winner === \"DRAW\") {\n        playSound(\"draw\");\n        alert(\"Draw\");\n      }\n    } else {\n      if (turn === \"BOT\") {\n        if (isEmpty(state)) {\n          var centerAndCorners = [0, 3, 6, 7, 4];\n          var firstMove = centerAndCorners[Math.floor(Math.random() * centerAndCorners.length)];\n          insertCell(firstMove, \"x\");\n          setIsHumanMaximizing(false);\n          setTurn(\"HUMAN\");\n        } else {\n          var best = getBestMove(state, !isHumanMaximizing, 0, -1);\n          insertCell(best, isHumanMaximizing ? \"o\" : \"x\");\n          setTurn(\"HUMAN\");\n        }\n      }\n    }\n  }, [state, turn]);\n  var getWinner = function getWinner(winnerSymbol) {\n    if (winnerSymbol === \"x\") {\n      return isHumanMaximizing ? \"HUMAN\" : \"BOT\";\n    }\n    if (winnerSymbol === \"o\") {\n      return isHumanMaximizing ? \"BOT\" : \"HUMAN\";\n    }\n    return \"DRAW\";\n  };\n  var insertCell = function insertCell(cell, symbol) {\n    var stateCopy = _toConsumableArray(state);\n    if (stateCopy[cell] || isTerminal(stateCopy)) return;\n    stateCopy[cell] = symbol;\n    setState(stateCopy);\n    try {\n      symbol == \"x\" ? playSound(\"pop1\") : playSound(\"pop2\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  function handleOnCellPressed(cell) {\n    if (turn !== \"HUMAN\") return;\n    insertCell(cell, isHumanMaximizing ? \"x\" : \"o\");\n    setTurn(\"BOT\");\n  }\n  return _jsx(GradientBackground, {\n    children: _jsx(SafeAreaView, {\n      style: styles.container,\n      children: _jsx(Board, {\n        disabled: Boolean(isTerminal(state)) || turn !== \"HUMAN\",\n        onCellPressed: function onCellPressed(cell) {\n          handleOnCellPressed(cell);\n        },\n        state: state,\n        size: SCREEN_WIDTH - 60,\n        gameResult: gameResult\n      })\n    })\n  });\n};\nexport default SinglePlayerGame;","map":{"version":3,"names":["React","useEffect","useState","styles","GradientBackground","Board","isEmpty","isTerminal","getBestMove","useSound","jsx","_jsx","SCREEN_WIDTH","Dimensions","get","width","SinglePlayerGame","_useState","_useState2","_slicedToArray","state","setState","_useState3","Math","random","_useState4","turn","setTurn","_useState5","_useState6","isHumanMaximizing","setIsHumanMaximizing","playSound","gameResult","winner","getWinner","alert","centerAndCorners","firstMove","floor","length","insertCell","best","winnerSymbol","cell","symbol","stateCopy","_toConsumableArray","error","console","log","handleOnCellPressed","children","SafeAreaView","style","container","disabled","Boolean","onCellPressed","size"],"sources":["F:/angular && app projects/Tic-Tac-Toe--app/src/screens/single-player-game/single-player-game.tsx"],"sourcesContent":["import { View, SafeAreaView, Dimensions } from 'react-native'\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport styles from './single-player-game.styles';\r\nimport { GradientBackground, Text, Board } from '@components';\r\nimport { BoardState, isEmpty, getAvailableMoves, Moves, cell, isFull, printFormattedBoard, isTerminal, getBestMove, useSound } from '@utils';\r\n\r\n\r\nconst SCREEN_WIDTH = Dimensions.get(\"screen\").width;\r\n\r\nconst SinglePlayerGame = () => {\r\n    const [state, setState ] = useState<BoardState>([\r\n        null, null, null,\r\n        null, null, null,\r\n        null, null, null\r\n    ])\r\n    // type Cell = 'x' | 'o' | null;\r\n    // const b: BoardState = [\r\n    //     'x', 'o', 'x',\r\n    //      'x', 'x', 'x',\r\n    //       'o', 'o', null\r\n    //     ];\r\n\r\n    // printFormattedBoard(b);\r\n    // console.log(isTerminal(b));\r\n\r\n    const [turn,  setTurn] = useState<\"HUMAN\" | \"BOT\">(\r\n        Math.random() < 0.5 ? \"HUMAN\" : \"BOT\");\r\n\r\n    const [isHumanMaximizing, setIsHumanMaximizing] =\r\n    useState<boolean>(true);\r\n\r\n    const playSound = useSound();\r\n    \r\n    const gameResult = isTerminal(state);\r\n\r\n    useEffect(()=>{\r\n        if(gameResult){\r\n            //handle game finished\r\n            const winner = getWinner(gameResult.winner);\r\n            if(winner === \"HUMAN\"){\r\n                playSound(\"win\")\r\n                alert(\"You Win!\")  \r\n            }\r\n            if(winner === \"BOT\"){\r\n\r\n                playSound(\"loss\")\r\n                alert(\"You Lost!\")\r\n            }\r\n            if(winner === \"DRAW\"){\r\n                \r\n                playSound(\"draw\")\r\n                alert(\"Draw\")\r\n            }\r\n            \r\n        }\r\n        else{\r\n            if(turn === \"BOT\" ){\r\n                if(isEmpty(state) ){\r\n                    const centerAndCorners = [0,3,6,7,4];\r\n                    const firstMove = centerAndCorners[Math.\r\n                    floor( Math.random() * centerAndCorners.length )]\r\n                    insertCell(firstMove, \"x\");\r\n                    setIsHumanMaximizing(false);\r\n                    setTurn(\"HUMAN\");\r\n                }\r\n                else{\r\n                    // replace -1 to 1 change difficulty\r\n                    const best = getBestMove( state, !isHumanMaximizing, 0,\r\n                        -1);\r\n                    insertCell( best, isHumanMaximizing ? \"o\" : \"x\");\r\n                    setTurn(\"HUMAN\");\r\n                }\r\n            }\r\n        }\r\n    }, [state, turn])\r\n\r\n    \r\n\r\n    const getWinner = (winnerSymbol : cell ) : \"HUMAN\" | \"BOT\" | \"DRAW\" =>{\r\n        if(winnerSymbol === \"x\"){\r\n            return isHumanMaximizing ? \"HUMAN\" : \"BOT\";\r\n        }\r\n        if(winnerSymbol === \"o\"){\r\n            return isHumanMaximizing ? \"BOT\" : \"HUMAN\";\r\n        }\r\n        return \"DRAW\";\r\n    }\r\n\r\n    const insertCell = ( cell : number, symbol : \"x\" | \"o\"): void =>{\r\n        const stateCopy : BoardState = [...state];\r\n        if(stateCopy[cell] || isTerminal(stateCopy))  return;\r\n\r\n        stateCopy[cell] = symbol;\r\n        setState(stateCopy);\r\n        try{\r\n           symbol == \"x\" ?  playSound(\"pop1\")\r\n           : playSound(\"pop2\");\r\n    \r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function handleOnCellPressed(cell: number) : void {\r\n        if(turn !== \"HUMAN\") return;\r\n        insertCell(cell, isHumanMaximizing ? \"x\" : \"o\" );\r\n        setTurn(\"BOT\");        \r\n    }\r\n\r\n    return (\r\n        <GradientBackground>\r\n            <SafeAreaView style={styles.container}>\r\n                {/* <Text style={{color  :'#fff'}}>SingleplayerGame</Text> */}\r\n                <Board\r\n                    disabled={Boolean(isTerminal(state)) || \r\n                     turn !== \"HUMAN\" }\r\n                    onCellPressed={(cell: number) => {\r\n                        handleOnCellPressed(cell)\r\n                    }}\r\n                    state={state} \r\n                    size={SCREEN_WIDTH - 60} \r\n                    gameResult = {gameResult} \r\n                />\r\n            </SafeAreaView>\r\n        </GradientBackground>\r\n\r\n    )\r\n}\r\n\r\nexport default SinglePlayerGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}