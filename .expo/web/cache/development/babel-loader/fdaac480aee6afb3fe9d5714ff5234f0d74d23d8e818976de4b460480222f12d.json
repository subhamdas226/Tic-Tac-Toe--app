{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport React from \"react\";\nimport styles from \"./settings.styles\";\nimport { GradientBackground, Text } from \"../../components\";\nimport { colors } from \"../../utils\";\nimport { useSettings, difficulties } from \"../../contexts/settings-context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Settings = function Settings() {\n  var _useSettings = useSettings(),\n    settings = _useSettings.settings,\n    saveSetting = _useSettings.saveSetting;\n  if (!settings) {\n    return null;\n  }\n  return _jsx(GradientBackground, {\n    children: _jsxs(ScrollView, {\n      contentContainerStyle: styles.container,\n      children: [_jsx(View, {\n        style: styles.field,\n        children: _jsx(Text, {\n          style: styles.label,\n          children: \"Bot Difficulty\"\n        })\n      }), _jsx(View, {\n        style: styles.choices,\n        children: Object.keys(difficulties).map(function (level) {\n          return _jsx(TouchableOpacity, {\n            style: [styles.choice, {\n              backgroundColor: settings.difficulty === level ? colors.lightpurple : colors.lightGreen\n            }],\n            onPress: function onPress() {\n              saveSetting(\"difficulty\", level);\n            },\n            children: _jsx(Text, {\n              style: [styles.choiceText, {\n                color: settings.difficulty === level ? \"#fff\" : \"#000\"\n              }],\n              children: difficulties[level]\n            })\n          }, level);\n        })\n      }), _jsxs(View, {\n        style: [styles.field, styles.switch],\n        children: [_jsx(Text, {\n          style: styles.label,\n          children: \"Sounds\"\n        }), _jsx(Switch, {\n          trackColor: {\n            false: \"#fff\",\n            true: colors.lightpurple\n          },\n          thumbColor: colors.lightGreen,\n          ios_backgroundColor: colors.purple,\n          value: settings.sounds,\n          onValueChange: function onValueChange() {\n            saveSetting(\"sounds\", !settings.sounds);\n          }\n        })]\n      }), _jsxs(View, {\n        style: [styles.field, styles.switch],\n        children: [_jsx(Text, {\n          style: styles.label,\n          children: \"Haptics/Vibrations\"\n        }), _jsx(Switch, {\n          trackColor: {\n            false: \"#fff\",\n            true: colors.lightpurple\n          },\n          thumbColor: colors.lightGreen,\n          ios_backgroundColor: colors.purple,\n          value: settings.haptics,\n          onValueChange: function onValueChange() {\n            saveSetting(\"haptics\", !settings.haptics);\n          }\n        })]\n      })]\n    })\n  });\n};\nexport default Settings;","map":{"version":3,"names":["React","styles","GradientBackground","Text","colors","useSettings","difficulties","jsx","_jsx","jsxs","_jsxs","Settings","_useSettings","settings","saveSetting","children","ScrollView","contentContainerStyle","container","View","style","field","label","choices","Object","keys","map","level","TouchableOpacity","choice","backgroundColor","difficulty","lightpurple","lightGreen","onPress","choiceText","color","switch","Switch","trackColor","false","true","thumbColor","ios_backgroundColor","purple","value","sounds","onValueChange","haptics"],"sources":["E:/projects/Tic-Tac-Toe--app/src/screens/settings/settings.tsx"],"sourcesContent":["import {\r\n  StyleSheet,\r\n  View,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  Switch,\r\n  Alert,\r\n} from \"react-native\";\r\nimport React, { ReactElement, useEffect, useState, useContext } from \"react\";\r\nimport styles from \"./settings.styles\";\r\nimport { GradientBackground, Text } from \"@components\";\r\nimport { colors } from \"@utils\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport SettingsContext, {\r\n  useSettings,\r\n  difficulties,\r\n} from \"@contexts/settings-context\";\r\n\r\nconst Settings = (): ReactElement | null => {\r\n  const { settings, saveSetting } = useSettings();\r\n\r\n  if (!settings) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <GradientBackground>\r\n      <ScrollView contentContainerStyle={styles.container}>\r\n        <View style={styles.field}>\r\n          <Text style={styles.label}>Bot Difficulty</Text>\r\n        </View>\r\n        <View style={styles.choices}>\r\n          {Object.keys(difficulties).map((level) => {\r\n            return (\r\n              <TouchableOpacity\r\n                key={level}\r\n                style={[\r\n                  styles.choice,\r\n                  {\r\n                    backgroundColor:\r\n                      settings.difficulty === level\r\n                        ? colors.lightpurple\r\n                        : colors.lightGreen,\r\n                  },\r\n                ]}\r\n                onPress={() => {\r\n                  saveSetting(\"difficulty\", level);\r\n                }}\r\n              >\r\n                <Text\r\n                  style={[\r\n                    styles.choiceText,\r\n                    {\r\n                      color: settings.difficulty === level ? \"#fff\" : \"#000\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  {difficulties[level]}\r\n                </Text>\r\n              </TouchableOpacity>\r\n            );\r\n          })}\r\n        </View>\r\n\r\n        <View style={[styles.field, styles.switch]}>\r\n          <Text style={styles.label}>Sounds</Text>\r\n          <Switch\r\n            trackColor={{\r\n              false: \"#fff\",\r\n              true: colors.lightpurple,\r\n            }}\r\n            thumbColor={colors.lightGreen}\r\n            ios_backgroundColor={colors.purple}\r\n            value={settings.sounds}\r\n            onValueChange={() => {\r\n              saveSetting(\"sounds\", !settings.sounds);\r\n            }}\r\n          />\r\n        </View>\r\n\r\n        <View style={[styles.field, styles.switch]}>\r\n          <Text style={styles.label}>Haptics/Vibrations</Text>\r\n          <Switch\r\n            trackColor={{\r\n              false: \"#fff\",\r\n              true: colors.lightpurple,\r\n            }}\r\n            thumbColor={colors.lightGreen}\r\n            ios_backgroundColor={colors.purple}\r\n            value={settings.haptics}\r\n            onValueChange={() => {\r\n              saveSetting(\"haptics\", !settings.haptics);\r\n            }}\r\n          />\r\n        </View>\r\n      </ScrollView>\r\n    </GradientBackground>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}