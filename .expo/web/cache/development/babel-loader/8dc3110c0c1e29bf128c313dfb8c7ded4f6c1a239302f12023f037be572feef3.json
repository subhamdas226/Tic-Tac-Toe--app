{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport var printFormattedBoard = function printFormattedBoard(state) {\n  var formattedString = \"\";\n  state.forEach(function (cell, index) {\n    formattedString += cell ? \" \" + cell + \" |\" : \"   |\";\n    if ((index + 1) % 3 === 0) {\n      formattedString = formattedString.slice(0, -1);\n      if (index < 8) {\n        formattedString += \"\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n\";\n      }\n    }\n  });\n};\nexport var isEmpty = function isEmpty(state) {\n  return state.every(function (cell) {\n    return cell === null;\n  });\n};\nexport var isFull = function isFull(state) {\n  return state.every(function (cell) {\n    return cell;\n  });\n};\nexport var getAvailableMoves = function getAvailableMoves(state) {\n  var moves = [];\n  state.forEach(function (cell, index) {\n    if (cell === null) {\n      moves.push(index);\n    }\n    return moves;\n  });\n  return moves;\n};\nexport var isTerminal = function isTerminal(state) {\n  if (isEmpty(state)) return false;\n  var winningLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (var index = 0; index < winningLines.length; index++) {\n    var line = winningLines[index];\n    var _line = _slicedToArray(line, 3),\n      cell1 = _line[0],\n      cell2 = _line[1],\n      cell3 = _line[2];\n    if (state[cell1] && state[cell1] === state[cell2] && state[cell1] === state[cell3]) {\n      var result = {\n        winner: state[cell1]\n      };\n      if (index < 3) {\n        result.direction = \"H\";\n        result.row = index === 0 ? 1 : index === 1 ? 2 : 3;\n      }\n      if (index >= 3 && index <= 5) {\n        result.direction = \"V\";\n        result.column = index === 3 ? 1 : index === 4 ? 2 : 3;\n      }\n      if (index > 5) {\n        result.direction = \"D\";\n        result.diagonal = index === 6 ? \"MAIN\" : \"COUNTER\";\n      }\n      return result;\n    }\n    if (isFull(state)) {\n      return {\n        winner: null\n      };\n    }\n  }\n  return false;\n};","map":{"version":3,"names":["printFormattedBoard","state","formattedString","forEach","cell","index","slice","isEmpty","every","isFull","getAvailableMoves","moves","push","isTerminal","winningLines","length","line","_line","_slicedToArray","cell1","cell2","cell3","result","winner","direction","row","column","diagonal"],"sources":["F:/angular && app projects/Tic-Tac-Toe--app/src/utils/board.ts"],"sourcesContent":["import { BoardState, Moves, BoardResult } from '@utils';\r\n\r\n\r\nexport const printFormattedBoard = (state: BoardState): void => {\r\n    // console.log(\"gsdvghf\", state);\r\n    let formattedString = \"\";\r\n    state.forEach((cell, index) => {\r\n        formattedString += cell ? ` ${cell} |` : \"   |\";\r\n        if ((index + 1) % 3 === 0) {\r\n            \r\n            formattedString = formattedString.slice(0, -1);\r\n            if (index < 8) {\r\n                //horizontal bar\r\n                formattedString += \"\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n\";\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    // console.log(formattedString);\r\n\r\n}\r\nexport const isEmpty = ( state : BoardState ) : boolean =>{\r\n    return state.every( cell => cell === null  )\r\n}\r\n\r\nexport const isFull = ( state : BoardState ) : boolean =>{\r\n    return state.every( cell => cell  )\r\n}\r\n\r\nexport const getAvailableMoves = (state  :BoardState) : Moves[] =>{\r\n    const moves : Moves[] = [];\r\n    state.forEach((cell, index ) =>{\r\n        if(cell === null){\r\n            moves.push(index as Moves);\r\n        }\r\n         return moves\r\n    })\r\n    return moves;\r\n}\r\n\r\nexport const isTerminal = ( state : BoardState) : BoardResult | false => {\r\n    if(isEmpty(state)) return false;\r\n    const winningLines = [\r\n        [0,1,2], //Horizontal\r\n        [3,4,5], //Horizontal\r\n        [6,7,8], //Horizontal\r\n        [0,3,6], //Vertical\r\n        [1,4,7], //Vertical\r\n        [2,5,8], //Vertical\r\n        [0,4,8], //Diagonal\r\n        [2,4,6]  //Diagonal\r\n    ];\r\n\r\n    for (let index = 0; index < winningLines.length; index++) {\r\n\r\n        const line = winningLines[index];\r\n        const [cell1, cell2, cell3] = line;\r\n        if(state[cell1] && state[cell1] === state[cell2] && state[cell1] === state[cell3] ){\r\n            const result : BoardResult = {\r\n                winner : state[cell1]\r\n            }\r\n            if( index < 3 ){\r\n                result.direction = \"H\";\r\n                result.row = index === 0 ? 1 : index === 1 ? 2 : 3;\r\n            }\r\n            if( index >= 3  && index <= 5){\r\n                result.direction = \"V\";\r\n                result.column = index === 3 ? 1 : index === 4 ? 2 : 3;\r\n            }\r\n            if( index > 5 ){\r\n                result.direction = \"D\";\r\n                result.diagonal = index === 6 ? \"MAIN\" : \"COUNTER\";\r\n            }\r\n            return result;\r\n        }\r\n        if(isFull(state)){\r\n            return {\r\n                winner : null\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}